var documenterSearchIndex = {"docs":
[{"location":"#UdpTest.jl-1","page":"UdpTest.jl","title":"UdpTest.jl","text":"","category":"section"},{"location":"#","page":"UdpTest.jl","title":"UdpTest.jl","text":"Documentation for UdpTest.jl","category":"page"},{"location":"#","page":"UdpTest.jl","title":"UdpTest.jl","text":"An Example for Module porting from Python to Julia language","category":"page"},{"location":"#","page":"UdpTest.jl","title":"UdpTest.jl","text":"Modules = [UdpTest]\nOrder   = [:function, :type]","category":"page"},{"location":"#UdpTest.client-Tuple{Any,Any}","page":"UdpTest.jl","title":"UdpTest.client","text":"function client(host::String, port::Int)\nrequire a message to send to the HOST on the PORT.\n    Eventually show the received replay.\n\n\n\n\n\n","category":"method"},{"location":"#UdpTest.server-Tuple{Any}","page":"UdpTest.jl","title":"UdpTest.server","text":"function server(port::Int)     start to listen on port and reply any Received message\n\n\n\n\n\n","category":"method"},{"location":"page2/#Codice-1","page":"Codice","title":"Codice","text":"","category":"section"},{"location":"page2/#Python-1","page":"Codice","title":"Python","text":"","category":"section"},{"location":"page2/#","page":"Codice","title":"Codice","text":"import sys\nimport socket\nimport click\n\nVERSION = \"0.1.1\"\n\ndef show_info(message, remote, prefix):\n    if not sys.version.startswith(\"2\"):\n        message = message.decode(\"utf-8\")\n    info = \"{prefix} {remote_ip} : {remote_port} ==> {message}\".format(\n        prefix=prefix,\n        remote_ip=remote[0],\n        remote_port=remote[1],\n        message=message,\n        )\n    click.echo(info)\n\n\n@click.group()\ndef test():\n    pass\n\n\n@test.command()\n@click.option(\"-p\", \"--port\", type=int, default=5005)\ndef server(port):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind(('0.0.0.0', port))\n    while True:\n        message, remote = sock.recvfrom(1024*64)\n        show_info(message, remote, \"Get a message from\")\n        sock.sendto(message, remote)\n\n\n@test.command()\n@click.option(\"-h\", \"--host\", default=\"127.0.0.1\")\n@click.option(\"-p\", \"--port\", type=int, default=5005)\n@click.option(\"-l\", \"--local-port\", type=int, default=0)\ndef client(host, port, local_port):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    if local_port:\n        sock.bind(('0.0.0.0', local_port))\n    while True:\n        line = input(\"Send message: \")\n        sock.sendto(line.encode(\"utf-8\"), (host, port))\n        message, remote = sock.recvfrom(1024*64)\n        show_info(message, remote, \"Received reply from\")\n\n\n\nif __name__ == \"__main__\":\n    test()\n","category":"page"},{"location":"page2/#Julia-1","page":"Codice","title":"Julia","text":"","category":"section"},{"location":"page2/#","page":"Codice","title":"Codice","text":"#######################################\n# UdpTest module name\n#######################################\nmodule UdpTest\n    using Sockets\n    import Base.show\n\n    export server, client, show_info\n\n    function __init__()\n        inizia()\n    end\n\n    function inizia()\n        println(\"Init\")\n        global sock = UDPSocket()\n        global port=5005\n        for a in ARGS\n            b=split(a)\n            if occursin(\"-p\",a) || occursin(\"--port\",a)\n                try\n                    port=split(a)[2]\n                catch\n                    println(\"Using defalut port $port\")\n                end\n            end\n\n        end\n    end\n\n    function show_info(message, remote, prefix)\n        try\n            prefix=prefix\n            remote_ip=remote\n            remote_port=\"-\"#remote[2]\n            message=message\n            info = \"$prefix $remote_ip : $remote_port ==> $message\"\n            println(info)\n            return 0\n        catch e\n            println(e)\n            return 1\n        end\n    end\n\"\"\"\nfunction server(port::Int)\n    start to listen on port and reply any Received message\n\"\"\"\n    function server(port)\n        try\n            bind(sock , IPv4(0), port)\n        @async while true\n                    remote, message = recvfrom(sock)\n                    println(\"messaggio ricevuto $remote\")\n                    show_info(message, remote, \"Get a message from\")\n                    send(sock,remote,port,message)\n                end\n        catch e\n            println(e)\n            return 1\n        end\n    end\n\n\"\"\"\n    function client(host::String, port::Int)\n    require a message to send to the HOST on the PORT.\n        Eventually show the received replay.\n\"\"\"\n    function client(host, port)\n        try\n            bind(sock, ip\"0.0.0.0\", port)\n            host_ip = getaddrinfo(host)\n            while true\n                print(\"Send Message: \")\n                line = readline()\n                send(sock,host_ip,port,line)\n                remote, line = recvfrom(sock)\n                show_info(line, host_ip, \"Received reply from\")\n            end\n        catch e\n            println(e)\n            return 1\n        end\n    end\n\nend # module\n","category":"page"}]
}
